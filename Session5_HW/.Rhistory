XTy = XT%*%y
beta = invXTX %*% XTy
beta
plot(out)
abline(lm(out[,2]~out[,1]), col="red") # regression line (y~x)
abline(a=0, b=beta, col="blue")
abline(a=beta[1,1], b=beta[1,2], col="blue")
abline(a=beta[1,1], b=beta[2,1], col="blue")
abline(lm(out[,2]~out[,1]), col="red") # regression line (y~x)
abline(a=beta[1,1], b=beta[2,1], col="blue")
abline(lm(out[,2]~out[,1]), col="red") # regression line (y~x)
abline(a=beta[1,1], b=beta[2,1], col="blue")
abline(lm(out[,2]~out[,1]), col="red") # regression line (y~x)
abline(a=beta[1,1], b=beta[2,1], col="blue")
abline(lm(out[,2]~out[,1]), col="red") # regression line (y~x)
abline(a=beta[1,1], b=beta[2,1], col="green")
abline(lm(out[,2]~out[,1]), col="red") # regression line (y~x)
#a matrix which has a column of 1s and a column with the data
abline(a=beta[1,1], b=beta[2,1], col="green") # I have to change a and beta so that
beta = 0.5
SIGMA = matrix(c(1,beta, beta, beta, 1, beta, beta, beta, 1), ncol=3)
MU = c(3, 2.0, 1.0)
print(SIGMA)
N = 50
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
dim(out)
plot(out)
print(out)
z = out[, 3]
y <- out[, 2]
x= rep(1, 2*N)#I create a vector of 1s
X = matrix(x, nrow= 50, ncol = 2) #I put this vector of 1s in matrix
X[, 2] <- out[, 1] #I put the data in the second column, so now I have
print(X)
X[, 3] <- out[, 2]
z = out[, 3]
y <- out[, 2]
V1= rep(1, 3*N)#I create a vector of 1s
X = matrix(V1, nrow= 50, ncol = 3) #I put this vector of 1s in matrix
X[, 2] <- out[, 1] #I put the data in the second column, so now I have
#a matrix which has a column of 1s and a column with the data
X[, 3] <- out[, 2]
print(X)
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
beta = invXTX %*% XTy
beta
plot(out)
abline(lm(out[,2]~out[,1]), col="red") # regression line (y~x)
abline(a=beta[1,1], b=beta[2,1], col="green") # I have to change a and b
FindingBeta = function(nvar=2, MU=c(2.0, 1.0),
SIGMA = matrix(c(1,beta,beta,1), ncol=2), N=50){
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
y = out[, 1]
V1= rep(1, nvar*N)   #I create a vector of 1s
X = matrix(V1, nrow= 50, ncol = nvar) #I put this vector of 1s in matrix
for(i in 2:nvar){
X[, i] <- out[, i+1]
#I put the data of the first variable in the second column,
#so now I have
#a matrix which has a column of 1s and a column with the data
}
# Now carry out intermediate calculations
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
beta = invXTX %*% XTy
beta
return(print(beta))
}
FindingBeta
FindingBeta
FindingBeta(2, MU, SIGMA, N)
FindingBeta(2, MU, SIGMA, N)
FindingBeta(2, MU, SIGMA, N)
FindingBeta(2, MU, SIGMA, N)
FindingBeta(2, MU, SIGMA, N)
library("devtools")
library("roxygen2")
library("testthat")
install.packages("devtools",
repos='http://cran.us.r-project.org')
install.packages("testthat",
repos='http://cran.us.r-project.org')
install.packages("roxygen2",
repos='http://cran.us.r-project.org')
library("devtools")
library("roxygen2")
library("testthat")
install.packages("devtools", repos = "http://cran.us.r-project.org")
library("devtools")
library("roxygen2")
library("testthat")
setwd("~/Master d'économie/Programming/Programming---Maxime-s-answers/Session5_HW/Maxime.Package")
document("Maxime.Package")
setwd("~/Master d'économie/Programming/Programming---Maxime-s-answers/Session5_HW")
setwd("~/Master d'économie/Programming/Programming---Maxime-s-answers/Session5_HW")
document("Maxime.Package")
name <- "Maxime.Package"
document("Maxime.Package")
document("Maxime.Package")
document("Maxime.Package")
?document
library(roxygen2)
document("Flipacoin")
document("Maxime.Package")
dir.create(paste(paste(dir, name, sep=""), "man", sep="/"))
name <- "Maxime.Package"
document("Maxime.Package")
dir = "~/Master d'économie/Programming/Programming---Maxime-s-answers/Session5_HW"
document("Maxime.Package")
document("Maxime.Package")
install.packages("igraph", repos="http://cran.is.r-project.org")
install.packages("igraph", repos="http://cran.us.r-project.org")
A = matrix(c(0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0), nrow=4)
print(A)
A = matrix(0, nrow = n , ncol = n)
n = 4
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
for(j in 1:n){
if(i != j ){
if(i ==1 | j == 1){
A[i, j]=1
}
}
}
}
print(A)
n = 1000
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
for(j in 1:n){
if(i != j ){
if(i ==1 | j == 1){
A[i, j]=1
}
}
}
}
print(A)
n = 10
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
for(j in 1:n){
if(i != j & (i ==1 | j == 1)){
A[i, j]=1
}
}
}
}
print(A)
plot(graph_from_adjency_matrix(A))
library(igraph)
plot(graph_from_adjency_matrix(A))
plot(graph_from_adjacency_matrix(A))
Star_network= function(n=2){
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
for(j in 1:n){
if(i != j & (i ==1 | j == 1)){
A[i, j]=1
}
}
}
}
plot(graph_from_adjacency_matrix(A))
}
Star_network()
Star_network()
Star_network()
Star_network()
Star_network(5)
Star_network(5)
Star_network= function(n){
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
for(j in 1:n){
if(i != j & (i ==1 | j == 1)){
A[i, j]=1
}
}
}
}
plot(graph_from_adjacency_matrix(A))
}
Star_network= function(n){
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
for(j in 1:n){
if(i != j & (i ==1 | j == 1)){
A[i, j]=1
}
}
}
plot(graph_from_adjacency_matrix(A))
}
Star_network(5)
Star_network()
Star_network= function(n=2){
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
for(j in 1:n){
if(i != j & (i ==1 | j == 1)){
A[i, j]=1
}
}
}
plot(graph_from_adjacency_matrix(A))
}
Star_network()
Star_network()
Star_network(16)
Random_network= function(n=2, p =0.5){
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
for(j in 1:n){
if(i != j ){
if(runif(1) <= p)
A[i, j]=1
}
}
}
plot(graph_from_adjacency_matrix(A))
}
Random_network()
Random_network(10)
Random_network(5)
Random_network= function(n=2, p =0.5){
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
for(j in 1:i){
if(i != j ){
if(runif(1) <= p)
A[i, j]=1
}
}
}
plot(graph_from_adjacency_matrix(A))
}
Random_network(5)
Random_network= function(n=2, p =0.5){
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
for(j in 1:i){
if(i != j ){
if(runif(1) <= p)
A[i, j]=1
}
}
}
print(A)
plot(graph_from_adjacency_matrix(A))
}
Random_network(5)
Random_network(5)
Random_network= function(n=2, p =0.5){
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
for(j in 1:i){
if(i != j ){
if(runif(1) <= p)
A[i, j]=1
}
}
}
A = A + t(A)
print(A)
plot(graph_from_adjacency_matrix(A))
}
Random_network(5)
Random_network= function(n=2, p =0.5){
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
for(j in 1:i){
if(i != j ){
if(runif(1) <= p)
A[i, j]=1
}
}
}
A = A + t(A)
print(A)
plot(graph_from_adjacency_matrix(A))
}
Random_network(5)
Random_network(5,1)
Random_network(6,1)
Random_network(1000,1)
Random_network(100,1)
Random_network(50,1)
Random_network(15,1)
Random_network(15)
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
for(j in 1:i){
if(i != j ){
if(runif(1) <= p)
A[i, j]=1
}
}
}
A = A + t(A)
print(A)
plot(graph_from_adjacency_matrix(A))
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
for(j in 1:i){
if(i != j ){
if(runif(1) <= p)
A[i, j]=1
}
}
}
A = A + t(A)
print(A)
plot(graph_from_adjacency_matrix(A))
p
p = 1
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
for(j in 1:i){
if(i != j ){
if(runif(1) <= p)
A[i, j]=1
}
}
}
A = A + t(A)
print(A)
plot(graph_from_adjacency_matrix(A))
p = 1
n=4
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
A[i, 1:(i-1)]= as.integer(runif(i-1) <= p)
}
}
}
A = A + t(A)
print(A)
p = 1
n=4
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
A[i, 1:(i-1)]= as.integer(runif(i-1) <= p)
}
A = A + t(A)
print(A)
p = 1
n=4
A = matrix(0, nrow = n , ncol = n)
for(i in 1:n){
A[i, 1:(i-1)]= as.integer(runif(i-1) <= p)
}
A = A + t(A)
print(A)
p = 1
n=4
A = matrix(0, nrow = n , ncol = n)
for(i in 2:n){
A[i, 1:(i-1)]= as.integer(runif(i-1) <= p)
}
A = A + t(A)
print(A)
p = 1
n=4
A = matrix(0, nrow = n , ncol = n)
for(i in 2:n){
A[i, 1:(i-1)]= as.integer(runif(i-1) <= p)
}
A = A + t(A)
print(A)
p = 1
n=4
A = matrix(0, nrow = n , ncol = n)
for(i in 2:n){
A[i, 1:(i-1)]= as.integer(runif(i-1) <= p)
}
A = A + t(A)
print(A)
p = 0.5
n=4
A = matrix(0, nrow = n , ncol = n)
for(i in 2:n){
A[i, 1:(i-1)]= as.integer(runif(i-1) <= p)
}
A = A + t(A)
print(A)
p = 0.5
n=4
A = matrix(0, nrow = n , ncol = n)
for(i in 2:n){
A[i, 1:(i-1)]= as.integer(runif(i-1) <= p)
}
A = A + t(A)
print(A)
p = 0.5
n=4
A = matrix(0, nrow = n , ncol = n)
for(i in 2:n){
A[i, 1:(i-1)]= as.integer(runif(i-1) <= p)
}
A = A + t(A)
print(A)
sample(c(0.1), size=as.integer(n*(n-1)/2), replace=T, prob = c(1-p, p))
sample(c(0.1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
p = 0.5
sample(c(0.1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A
A = matrix(0, nrow = n , ncol = n)
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A
A = matrix(0, nrow = n , ncol = n)
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A
A = matrix(0, nrow = n , ncol = n)
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A
A = matrix(0, nrow = n , ncol = n)
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A
A = matrix(0, nrow = n , ncol = n)
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A = A + t(A)
A = matrix(0, nrow = n , ncol = n)
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A = A + t(A)
A = matrix(0, nrow = n , ncol = n)
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A = A + t(A)
A = matrix(0, nrow = n , ncol = n)
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A = A + t(A)
A = matrix(0, nrow = n , ncol = n)
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A = A + t(A)
A
A = matrix(0, nrow = n , ncol = n)
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A = A + t(A)
A
A = matrix(0, nrow = n , ncol = n)
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A = A + t(A)
A
A = matrix(0, nrow = n , ncol = n)
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A = A + t(A)
A
A = matrix(0, nrow = n , ncol = n)
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A = A + t(A)
A
A = matrix(0, nrow = n , ncol = n)
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A = A + t(A)
A
A = matrix(0, nrow = n , ncol = n)
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A = A + t(A)
A
Random_network= function(n=2, p =0.5){
A = matrix(0, nrow = n , ncol = n)
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A[lower.tri(A)]= sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, c(1-p, p))
A = A + t(A)
print(A)
plot(graph_from_adjacency_matrix(A))
}
Random_network(15)
Random_network(100)
Random_network(100)
Random_network(1000)
document("Maxime.Package")
dir = "~/Master d'économie/Programming/Programming---Maxime-s-answers/Session5_HW"
dir.create(paste(paste(dir, name, sep=""), "man", sep="/"))
document("Maxime.Package")
document("Maxime.Package")
Dir = "~/Master d'économie/Programming/Programming---Maxime-s-answers/Session5_HW"
dir.create(paste(paste(Dir, name, sep=""), "man", sep="/"))
document("Maxime.Package")
Dir = "~/Master d'économie/Programming/Programming---Maxime-s-answers/Session5_HW/"
dir.create(paste(paste(Dir, name, sep=""), "man", sep="/"))
document("Maxime.Package")
Dir = "~/Master d'économie/Programming/Programming---Maxime-s-answers/Session5_HW/"
dir.create(paste(paste(Dir, name, sep=""), "man", sep="/"))
document("Maxime.Package")
